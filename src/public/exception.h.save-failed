#pragma once
#include "define.h"
#include <string>
#include <vector>
#include "util/forstring.h"
#include "string.h"
#include <stdexcept>
namespace newobj
{

	/****************************************************************
	 * Class: ????????
	 ****************************************************************/
	class exception:public std::exception
	{
	public:
		/****************************************************************
		 * Fun: ??????
		 * Param
		 *			e								:		??????
		 ****************************************************************/
		exception(const nstring& e = nstring(""));
		/****************************************************************
		 * Fun: operator +=
		 * Param
		 *			e								:		??????,???????
		 ****************************************************************/
		void operator+=(const nstring& e);
		/****************************************************************
		 * Fun: ?????????
		 ****************************************************************/
		void print() const;
		/****************************************************************
		 * Fun: ????????????
		 ****************************************************************/
		void abort() const;
		/****************************************************************
		 * Fun: ?????????
		 * Param
		 *			line							:		??????
		 *			filename					:		?????
		 *			funname					:		??????
		 ****************************************************************/
		void set_codeaddr(uint32 line,const nstring&filename,const nstring&funname);
		/****************************************************************
		 * Fun: ???????????????
		 ****************************************************************/
		const std::vector<nstring>& errors() const;
		/****************************************************************
		 * Fun: ??????????????
		 ****************************************************************/
		const nstring& filename() const;
		/****************************************************************
		 * Fun: ???????????????
		 ****************************************************************/
		const nstring& funname() const;
		void set_logptr(ptr log);
		nstring to_string() const;
		virtual char const* what() const noexcept override;
	private:
		std::vector<nstring> m_es;			//??????????
		uint32 m_code_line;				//????????
		nstring m_code_filename;				//???????????
		nstring m_code_funname;				//??????????
		ptr m_log_ptr;
	};
}

